; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "GDMN DTC Server"
#define MySetupFileName "gdmn-dtc-server"
#define MyAppVersion "0.1.0"
#define MyAppPublisher "Golden Software of Belarus, Ltd."
#define MyAppURL "http://gsbelarus.com/"
#define MyOutput "installer_output"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={59614ACB-2FA1-4F7A-948E-FD7E7C07C3D2}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
OutputDir={#MyOutput}
OutputBaseFilename={#MySetupFileName}-{#MyAppVersion}
Compression=lzma2/ultra64
SolidCompression=yes
PrivilegesRequired=admin

[Tasks]
Name: "starticon"; Description: "Запуск сервера"; GroupDescription: "Ярлыки на рабочем столе:";
Name: "stopicon"; Description: "Остановка сервера"; GroupDescription: "Ярлыки на рабочем столе:";
Name: "monitoricon"; Description: "Отслеживание сервера"; GroupDescription: "Ярлыки на рабочем столе:"; Flags: unchecked

Name: "autostart"; Description: "Автозагрузка"; GroupDescription: "Дополнительно:"; Flags: unchecked
Name: "autostart\user"; Description: "Для текущего пользователя"; GroupDescription: "Дополнительно:"; Flags: unchecked exclusive
Name: "autostart\common"; Description: "Для всех пользователей"; GroupDescription: "Дополнительно:"; Flags: unchecked exclusive

[Languages]
; Name: "english"; MessagesFile: "compiler:Default.isl"
Name: "russian"; MessagesFile: "compiler:Languages\Russian.isl"

[Files]
Source: "config\production.json"; DestDir: "{app}\config"; Flags: ignoreversion recursesubdirs createallsubdirs onlyifdoesntexist
Source: "*"; DestDir: "{app}"; \
  Excludes: "\{#MyOutput}, config\production.json, installer-script.iss, \node_modules, \.git, \.idea, \dist, \public, .gitignore, db_schema.png"; \
  Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files 

[Icons]
Name: "{userstartup}\Start GDMN TA Server"; Filename: "{app}\bin\start.cmd"; Tasks: autostart\user
Name: "{commonstartup}\Start GDMN TA Server"; Filename: "{app}\bin\start.cmd"; Tasks: autostart\common

Name: "{group}\Start GDMN TA Server"; Filename: "{app}\bin\start.cmd"
Name: "{group}\Stop GDMN TA Server"; Filename: "{app}\bin\stop.cmd"
Name: "{group}\Monitor GDMN TA Server"; Filename: "{app}\bin\monitor.cmd"
Name: "{group}\Uninstall GDMN TA Server"; Filename: "{uninstallexe}"

Name: "{userdesktop}\Start GDMN TA Server"; Filename: "{app}\bin\start.cmd"; Tasks: starticon
Name: "{userdesktop}\Stop GDMN TA Server"; Filename: "{app}\bin\stop.cmd"; Tasks: stopicon
Name: "{userdesktop}\Monitor GDMN TA Server"; Filename: "{app}\bin\monitor.cmd"; Tasks: monitoricon

[Run]
Filename: "{app}\install\bin\node-v8.6.0-x64.msi"; StatusMsg: "Установка Node..."; Check: IsWin64; Flags: shellexec waituntilterminated runascurrentuser
Filename: "{app}\install\bin\node-v8.6.0-x86.msi"; StatusMsg: "Установка Node..."; Check: not IsWin64; Flags: shellexec waituntilterminated runascurrentuser
Filename: "{app}\install\bin\yarn-1.3.2.msi"; StatusMsg: "Установка Yarn..."; Flags: shellexec waituntilterminated runascurrentuser
Filename: "{app}\install\install.cmd"; StatusMsg: "Установка npm модулей..."; Flags: runascurrentuser
Filename: "{app}\install\build.cmd"; StatusMsg: "Подготовка файлов..."; Flags: runascurrentuser
                                                               
Filename: "{app}\bin\start.cmd"; Description: "Запустить сервер"; Flags: runascurrentuser postinstall unchecked nowait

[Code]
var
  ConfigPage: TInputQueryWizardPage;
  ConfigMemo : TNewMemo;

procedure InitConfigPage();
var
  JsonIndex: Integer;
  JsonEdit: TCustomEdit;
begin
  ConfigPage := CreateInputQueryPage(wpInstalling, 'Конфигурация', 'Пожалуйста введие нужную конфигурацию', ''); 
       
  JsonIndex := ConfigPage.Add('Конфигурация в формате JSON', False);
  JsonEdit := ConfigPage.Edits[JsonIndex];

  ConfigMemo := TNewMemo.Create(WizardForm);
  ConfigMemo.Parent := JsonEdit.Parent;
  ConfigMemo.SetBounds(JsonEdit.Left, JsonEdit.Top, JsonEdit.Width, ScaleY(100));

  JsonEdit.Visible := False;

  ConfigPage.PromptLabels[JsonIndex].FocusControl := ConfigMemo;
end;

function NextButtonClick(CurPageID: Integer): Boolean;
begin
  if CurPageID = ConfigPage.ID then
  begin
    SaveStringToFile(ExpandConstant('{app}\config\production.json'), ConfigMemo.Text, False);
  end;
  Result := True;
end;

procedure CurPageChanged(CurPageID: Integer);
var
  Text: String;
begin 
  if CurPageID = ConfigPage.ID then
  begin
    LoadStringFromFile(ExpandConstant('{app}\config\production.json'), Text);
    ConfigMemo.Text := Text; 
  end;
end;

procedure InitializeWizard();
begin
  InitConfigPage();
end;